import requests
import pandas as pd
import json
import time
import os

def get_company_data_from_deepseek():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö —á–µ—Ä–µ–∑ API DeepSeek
    """
    API_URL = "https://openrouter.ai/api/v1/chat/completions"
    API_KEY =  "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"

    prompt = """
    –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –º–æ—Å–∫–æ–≤—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –∑–∞ 2022-2024 –≥–æ–¥—ã.

    –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –§–û–†–ú–ê–¢–£ –î–ê–ù–ù–´–•:
    - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)
    - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8
    - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ
    - –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç—Ä–∞—Å–ª–∏


    –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–ê–ù–ù–´–ú:
    - –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2022, 2023, 2024 –≥–æ–¥—ã (–≤—Å–µ–≥–æ 36 —Å—Ç—Ä–æ–∫)
    - –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–Ω–æ–π –ø–æ –≥–æ–¥–∞–º: 65, 75, 82 —Ç—ã—Å. —Ä—É–±.
    - –î–∞–Ω–Ω—ã–µ –æ–± –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Ä–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏: "–î–∞"/"–ù–µ—Ç"/"–ù–µ—Ç —Å–≤–µ–¥–µ–Ω–∏–π" (—Å–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
    - –û—Å–æ–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã: "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å" –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π, "–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫" –¥–ª—è IT, "–°–≤–µ–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º –Ω–æ—Ä–º–∞–º
    - –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ—â–Ω–æ—Å—Ç–µ–π –æ—Ç 70% –¥–æ 96%
    - –ù–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç—Ä–∞—Å–ª–∏
    - –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞—Ç—å –º–µ–∂–¥—É —Å–æ–±–æ–π

    –§–û–†–ú–ê–¢ CSV –î–û–õ–ñ–ï–ù –°–û–û–¢–í–ï–¢–°–¢–í–û–í–ê–¢–¨ –≠–¢–û–ú–£ –ü–†–ò–ú–ï–†–£:
    –ò–ù–ù;–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏;–û—Å–Ω–æ–≤–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å;–ü–æ–¥–æ—Ç—Ä–∞—Å–ª—å (–û—Å–Ω–æ–≤–Ω–∞—è);–î–∞–Ω–Ω—ã–µ –æ–± –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Ä–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏;–ù–∞–ª–∏—á–∏–µ –æ—Å–æ–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞;–í—ã—Ä—É—á–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, —Ç—ã—Å. —Ä—É–±;–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (—É–±—ã—Ç–æ–∫),—Ç—ã—Å. —Ä—É–±.;–°—Ä–µ–¥–Ω–µ—Å–ø–∏—Å–æ—á–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –≤ –ú–æ—Å–∫–≤–µ, —á–µ–ª;–§–æ–Ω–¥ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –≤ –ú–æ—Å–∫–≤–µ, —Ç—ã—Å. —Ä—É–±.;–°—Ä–µ–¥–Ω—è—è –∑.–ø. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –≤ –ú–æ—Å–∫–≤–µ, —Ç—ã—Å.—Ä—É–±.;–ù–∞–ª–æ–≥–∏, —É–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤ –±—é–¥–∂–µ—Ç –ú–æ—Å–∫–≤—ã (–±–µ–∑ –∞–∫—Ü–∏–∑–æ–≤), —Ç—ã—Å.—Ä—É–±.;–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å, —Ç—ã—Å.—Ä—É–±.;–ù–∞–ª–æ–≥ –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ, —Ç—ã—Å.—Ä—É–±.;–ù–∞–ª–æ–≥ –Ω–∞ –∑–µ–º–ª—é, —Ç—ã—Å.—Ä—É–±.;–ù–î–§–õ, —Ç—ã—Å.—Ä—É–±.;–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –Ω–∞–ª–æ–≥, —Ç—ã—Å.—Ä—É–±.;–ü—Ä–æ—á–∏–µ –Ω–∞–ª–æ–≥–∏;–ê–∫—Ü–∏–∑—ã, —Ç—ã—Å. —Ä—É–±.;–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ú—Å–∫ —Ç—ã—Å. —Ä—É–±.;–û–±—ä–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∞, —Ç—ã—Å. —Ä—É–±.;–£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π;–ù–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç;–û–±—ä–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∞ (–º–ª–Ω —Ä—É–±.) –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–æ–¥;–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞;–û–∫—Ä—É–≥;–†–∞–π–æ–Ω;–ì–æ–¥;–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω;–ö–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω;–í–∏–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏;–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    –í–ï–†–ù–ò –¢–û–õ–¨–ö–û CSV –î–ê–ù–ù–´–ï –ë–ï–ó –õ–Æ–ë–´–• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í, –û–ë–™–Ø–°–ù–ï–ù–ò–ô –ò–õ–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø MARKDOWN. –ó–ê–ì–û–õ–û–í–ö–∏ CSV –ü–†–û–ü–£–°–¢–ò.
    """

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "deepseek/deepseek-chat",
        "messages": [
            {
                "role": "user",
                "content": prompt
            }
        ],
        "temperature": 0.7,
        "max_tokens": 4000
    }

    try:
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API...")
        start_time = time.time()
        response = requests.post(API_URL, headers=headers, json=data, timeout=60)
        response.raise_for_status()

        result = response.json()
        generated_content = result['choices'][0]['message']['content']

        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç DeepSeek!")
        processing_time = time.time() - start_time

        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        return generated_content

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek API: {e}")


def save_to_csv_and_display(csv_data, DATA_FILEPATH='test_data_3.csv'):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    """
    # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    try:
        with open(DATA_FILEPATH, 'r', encoding='utf-8') as f:
            existing_lines = f.readlines()
        start_number = len(existing_lines)  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
    except FileNotFoundError:
        start_number = 1

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
    lines = csv_data.strip().split('\n')
    headers = lines[0] if lines else ""
    data_lines = lines[1:] if len(lines) > 1 else []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –∫ –¥–∞–Ω–Ω—ã–º
    numbered_data_lines = []
    for i, line in enumerate(data_lines):
        numbered_line = f"{start_number + i};{line}"
        numbered_data_lines.append(numbered_line)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    full_data = f"{headers}\n" + "\n".join(numbered_data_lines)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª csv
    with open(DATA_FILEPATH, 'a', encoding='utf-8') as f:
        if start_number == 1:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π, –ø–∏—à–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            f.write(headers + '\n')
        f.write("\n".join(numbered_data_lines) + '\n')


def convert_csv_to_json(csv_filename, json_filename=None):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª –≤ JSON —Ñ–æ—Ä–º–∞—Ç

    Args:
        csv_filename (str): –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        json_filename (str): –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    """
    if json_filename is None:
        json_filename = csv_filename.replace('.csv', '.json')

    try:
        # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        df = pd.read_csv(csv_filename, delimiter=';', encoding='utf-8')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON
        json_data = df.to_json(json_filename, orient='records', indent=2, force_ascii=False)

        print(f" –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")

        return json_data

    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CSV –≤ JSON: {e}")
        return None

def main_function(DATA_FILEPATH='test_data_3.csv'):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print(" –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö —á–µ—Ä–µ–∑ DeepSeek API...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç DeepSeek
    csv_data = get_company_data_from_deepseek()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_to_csv_and_display(csv_data, DATA_FILEPATH)
    result_df = pd.read_csv(DATA_FILEPATH, encoding='utf-8', delimiter=";")
    #convert_csv_to_json(DATA_FILEPATH)
    return result_df

if __name__ == "__main__":
    main_function()